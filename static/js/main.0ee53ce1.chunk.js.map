{"version":3,"sources":["components/Stats/stylesStats.module.css","helpers/helpers.js","components/Stats/Stats.jsx","components/App/App.jsx","index.js"],"names":["module","exports","colors","color","isOpen","isCompleted","compareRandom","a","b","Math","random","randomColors","sort","Stats","implementation","counterAttempt","wins","bestResult","className","container","useStyles","makeStyles","theme","root","padding","width","margin","paper","display","textAlign","palette","text","secondary","height","backgroundColor","active","App","classes","useState","setColors","setImplementation","setCounterAttempt","setWins","setbestResult","disabled","setDisabled","useEffect","findOpenedColors","filter","item","length","prev","setTimeout","comletedColors","map","differentСolors","Grid","direction","justify","alignItems","spacing","i","xs","key","Paper","onClick","findColorByIndex","index","handleClick","style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ee53ce1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"stylesStats_container__236vs\"};","const colors = [\r\n  { color: 'red', isOpen: false, isCompleted: false },\r\n  { color: 'red', isOpen: false, isCompleted: false },\r\n  { color: 'black', isOpen: false, isCompleted: false },\r\n  { color: 'black', isOpen: false, isCompleted: false },\r\n  { color: 'blue', isOpen: false, isCompleted: false },\r\n  { color: 'blue', isOpen: false, isCompleted: false },\r\n  { color: 'purple', isOpen: false, isCompleted: false },\r\n  { color: 'purple', isOpen: false, isCompleted: false },\r\n  { color: 'grey', isOpen: false, isCompleted: false },\r\n  { color: 'grey', isOpen: false, isCompleted: false },\r\n  { color: 'yellow', isOpen: false, isCompleted: false },\r\n  { color: 'yellow', isOpen: false, isCompleted: false },\r\n  { color: 'pink', isOpen: false, isCompleted: false },\r\n  { color: 'pink', isOpen: false, isCompleted: false },\r\n  { color: 'orange', isOpen: false, isCompleted: false },\r\n  { color: 'orange', isOpen: false, isCompleted: false },\r\n];\r\n\r\nconst compareRandom = (a, b) => {\r\n  return Math.random() - 0.5;\r\n};\r\n\r\nconst randomColors = () => colors.sort(compareRandom);\r\nexport default randomColors;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { container } from './stylesStats.module.css';\r\n\r\nconst Stats = ({ implementation, counterAttempt, wins, bestResult }) => (\r\n  <section className={container}>\r\n    <h4>\r\n      Number of attempts: <span>{counterAttempt}</span>\r\n    </h4>\r\n    <h4>\r\n      Guessed: <span>{implementation} of 8</span>\r\n    </h4>\r\n    <h4>\r\n      Number of wins: <span>{wins}</span>\r\n    </h4>\r\n    <h4>\r\n      Best result: <span>{bestResult}</span>\r\n    </h4>\r\n  </section>\r\n);\r\n\r\nStats.propTypes = {\r\n  implementation: PropTypes.number.isRequired,\r\n  counterAttempt: PropTypes.number.isRequired,\r\n  wins: PropTypes.number.isRequired,\r\n  bestResult: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Stats;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport randomColors from '../../helpers/helpers';\r\n\r\nimport Stats from '../Stats/Stats';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: 20,\r\n    width: 500,\r\n    margin: '0 auto',\r\n  },\r\n  paper: {\r\n    display: 'flex',\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    margin: '0 auto',\r\n    width: 100,\r\n    height: 100,\r\n    backgroundColor: 'transparent',\r\n  },\r\n  active: {\r\n    width: 100,\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n  const [colors, setColors] = useState(randomColors());\r\n  const [implementation, setImplementation] = useState(0);\r\n  const [counterAttempt, setCounterAttempt] = useState(0);\r\n  const [wins, setWins] = useState(0);\r\n  const [bestResult, setbestResult] = useState(0);\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  const clearState = () => {\r\n    setColors(randomColors());\r\n    setImplementation(0);\r\n    setCounterAttempt(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const findOpenedColors = colors.filter((item) => item.isOpen);\r\n    if (findOpenedColors.length === 2) {\r\n      setCounterAttempt((prev) => prev + 1);\r\n      setDisabled(true);\r\n      setTimeout(() => {\r\n        if (findOpenedColors[0].color === findOpenedColors[1].color) {\r\n          const comletedColors = colors.map((item) =>\r\n            item.isOpen ? { ...item, isOpen: false, isCompleted: true } : item,\r\n          );\r\n          setImplementation((prev) => prev + 1);\r\n          setDisabled(false);\r\n          return setColors(comletedColors);\r\n        }\r\n        const differentСolors = colors.map((item) =>\r\n          item.isOpen ? { ...item, isOpen: false } : item,\r\n        );\r\n        setDisabled(false);\r\n\r\n        return setColors(differentСolors);\r\n      }, 500);\r\n    }\r\n\r\n    if (implementation === 8) {\r\n      setWins((prev) => prev + 1);\r\n      if (bestResult) {\r\n        setbestResult((prev) =>\r\n          prev > counterAttempt ? counterAttempt : prev,\r\n        );\r\n      } else {\r\n        setbestResult(counterAttempt);\r\n      }\r\n\r\n      clearState();\r\n    }\r\n  }, [colors]);\r\n\r\n  const handleClick = (i) => {\r\n    if (colors[i].isCompleted || colors[i].isOpen) return;\r\n\r\n    const findColorByIndex = colors.map((item, index) =>\r\n      index === i ? { ...item, isOpen: true } : item,\r\n    );\r\n\r\n    setColors(findColorByIndex);\r\n  };\r\n\r\n  return (\r\n    <main className={classes.root}>\r\n      <Stats\r\n        implementation={implementation}\r\n        counterAttempt={counterAttempt}\r\n        wins={wins}\r\n        bestResult={bestResult}\r\n      />\r\n      <section>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n          spacing={2}\r\n        >\r\n          {colors.map(({ color, isOpen, isCompleted }, i) => (\r\n            <Grid item xs={3} key={Math.random()}>\r\n              <Paper\r\n                className={classes.paper}\r\n                onClick={() => !disabled && handleClick(i)}\r\n              >\r\n                {isCompleted ? (\r\n                  <Paper\r\n                    className={classes.active}\r\n                    style={{ backgroundColor: 'transparent' }}\r\n                  ></Paper>\r\n                ) : (\r\n                  <Paper\r\n                    className={classes.active}\r\n                    style={{ backgroundColor: isOpen ? color : '#fff' }}\r\n                  ></Paper>\r\n                )}\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport './styles.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}