{"version":3,"sources":["components/Stats/stylesStats.module.css","helpers/helpers.js","components/Stats/Stats.jsx","components/App/App.jsx","index.js"],"names":["module","exports","colors","color","isOpen","isCompleted","compareRandom","a","b","Math","random","randomColors","sort","Stats","implementation","counterAttempt","wins","bestResult","className","container","useStyles","makeStyles","theme","root","padding","width","margin","paper","display","textAlign","palette","text","secondary","height","backgroundColor","active","App","classes","useState","setColors","setImplementation","setCounterAttempt","setWins","setbestResult","disabled","setDisabled","useEffect","findOpenedColors","filter","item","length","prev","setTimeout","comletedColors","map","differentСolors","Grid","direction","justify","alignItems","spacing","i","xs","key","Paper","onClick","findColorByIndex","index","handleClick","style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cb4440c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"stylesStats_container__3ufHO\"};","const colors = [\n  { color: 'red', isOpen: false, isCompleted: false },\n  { color: 'red', isOpen: false, isCompleted: false },\n  { color: 'black', isOpen: false, isCompleted: false },\n  { color: 'black', isOpen: false, isCompleted: false },\n  { color: 'blue', isOpen: false, isCompleted: false },\n  { color: 'blue', isOpen: false, isCompleted: false },\n  { color: 'purple', isOpen: false, isCompleted: false },\n  { color: 'purple', isOpen: false, isCompleted: false },\n  { color: 'grey', isOpen: false, isCompleted: false },\n  { color: 'grey', isOpen: false, isCompleted: false },\n  { color: 'yellow', isOpen: false, isCompleted: false },\n  { color: 'yellow', isOpen: false, isCompleted: false },\n  { color: 'pink', isOpen: false, isCompleted: false },\n  { color: 'pink', isOpen: false, isCompleted: false },\n  { color: 'orange', isOpen: false, isCompleted: false },\n  { color: 'orange', isOpen: false, isCompleted: false },\n];\n\nconst compareRandom = (a, b) => {\n  return Math.random() - 0.5;\n};\n\nconst randomColors = () => colors.sort(compareRandom);\nexport default randomColors;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { container } from './stylesStats.module.css';\n\nconst Stats = ({ implementation, counterAttempt, wins, bestResult }) => (\n  <section className={container}>\n    <h4>\n      Number of attempts: <span>{counterAttempt}</span>\n    </h4>\n    <h4>\n      Guessed: <span>{implementation} of 8</span>\n    </h4>\n    <h4>\n      Number of wins: <span>{wins}</span>\n    </h4>\n    <h4>\n      Best result: <span>{bestResult}</span>\n    </h4>\n  </section>\n);\n\nStats.propTypes = {\n  implementation: PropTypes.number.isRequired,\n  counterAttempt: PropTypes.number.isRequired,\n  wins: PropTypes.number.isRequired,\n  bestResult: PropTypes.number.isRequired,\n};\n\nexport default Stats;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport randomColors from '../../helpers/helpers';\n\nimport Stats from '../Stats/Stats';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: 20,\n    width: 500,\n    margin: '0 auto',\n  },\n  paper: {\n    display: 'flex',\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    margin: '0 auto',\n    width: 100,\n    height: 100,\n    backgroundColor: 'transparent',\n  },\n  active: {\n    width: 100,\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const [colors, setColors] = useState(randomColors());\n  const [implementation, setImplementation] = useState(0);\n  const [counterAttempt, setCounterAttempt] = useState(0);\n  const [wins, setWins] = useState(0);\n  const [bestResult, setbestResult] = useState(0);\n  const [disabled, setDisabled] = useState(false);\n\n  const clearState = () => {\n    setColors(randomColors());\n    setImplementation(0);\n    setCounterAttempt(0);\n  };\n\n  useEffect(() => {\n    const findOpenedColors = colors.filter((item) => item.isOpen);\n    if (findOpenedColors.length === 2) {\n      setCounterAttempt((prev) => prev + 1);\n      setDisabled(true);\n      setTimeout(() => {\n        if (findOpenedColors[0].color === findOpenedColors[1].color) {\n          const comletedColors = colors.map((item) =>\n            item.isOpen ? { ...item, isOpen: false, isCompleted: true } : item,\n          );\n          setImplementation((prev) => prev + 1);\n          setDisabled(false);\n          return setColors(comletedColors);\n        }\n        const differentСolors = colors.map((item) =>\n          item.isOpen ? { ...item, isOpen: false } : item,\n        );\n        setDisabled(false);\n\n        return setColors(differentСolors);\n      }, 500);\n    }\n\n    if (implementation === 8) {\n      setWins((prev) => prev + 1);\n      if (bestResult) {\n        setbestResult((prev) =>\n          prev > counterAttempt ? counterAttempt : prev,\n        );\n      } else {\n        setbestResult(counterAttempt);\n      }\n\n      clearState();\n    }\n  }, [colors]);\n\n  const handleClick = (i) => {\n    if (colors[i].isCompleted || colors[i].isOpen) return;\n\n    const findColorByIndex = colors.map((item, index) =>\n      index === i ? { ...item, isOpen: true } : item,\n    );\n\n    setColors(findColorByIndex);\n  };\n\n  return (\n    <main className={classes.root}>\n      <Stats\n        implementation={implementation}\n        counterAttempt={counterAttempt}\n        wins={wins}\n        bestResult={bestResult}\n      />\n      <section>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n          spacing={2}\n        >\n          {colors.map(({ color, isOpen, isCompleted }, i) => (\n            <Grid item xs={3} key={Math.random()}>\n              <Paper\n                className={classes.paper}\n                onClick={() => !disabled && handleClick(i)}\n              >\n                {isCompleted ? (\n                  <Paper\n                    className={classes.active}\n                    style={{ backgroundColor: 'transparent' }}\n                  ></Paper>\n                ) : (\n                  <Paper\n                    className={classes.active}\n                    style={{ backgroundColor: isOpen ? color : '#fff' }}\n                  ></Paper>\n                )}\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>\n      </section>\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}